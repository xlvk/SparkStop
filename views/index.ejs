<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/index.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/3.1.2/fullpage.min.css"
    integrity="sha512-4rPgyv5iG0PZw8E+oRdfN/Gq+yilzt9rQ8Yci2jJ15rAyBmF0HBE4wFjBkoB72cxBeg63uobaj1UcNt/scV93w=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <title>FireOwl</title>
</head>

<body>
  <div id="fullpage">
    <section class="section">
      <header>
        <nav class="navbar navbar-default" id="navigation">
          <div class="container-fluid">
            <div class="navbar-header">
              <a class="navbar-brand" href="#">SparkStop</a>
            </div>
            <ul class="nav navbar-nav">
              <li class="active"><a href="#">Home.</a></li>
              <li class="dropdown"><a class="dropdown-toggle" data-toggle="dropdown" href="#">Home Menu.<span
                    class="caret"></span></a>
                <ul class="dropdown-menu">
                  <li><a>Home</a></li>
                  <li><a href="Device.ejs">Our Device.</a></li>
                  <li><a href="Chart.ejs">Chart Explanation.</a></li>
                  <li><a href="Guides.ejs">Guides.</a></li>
                </ul>
              </li>
            </ul>
            <div class="container-input">
              <input type="text" placeholder="Search" name="text" class="input">
              <svg fill="#000000" width="20px" height="20px" viewBox="0 0 1920 1920" xmlns="http://www.w3.org/2000/svg">
                <path
                  d="M790.588 1468.235c-373.722 0-677.647-303.924-677.647-677.647 0-373.722 303.925-677.647 677.647-677.647 373.723 0 677.647 303.925 677.647 677.647 0 373.723-303.924 677.647-677.647 677.647Zm596.781-160.715c120.396-138.692 193.807-319.285 193.807-516.932C1581.176 354.748 1226.428 0 790.588 0S0 354.748 0 790.588s354.748 790.588 790.588 790.588c197.647 0 378.24-73.411 516.932-193.807l516.028 516.142 79.963-79.963-516.142-516.028Z"
                  fill-rule="evenodd"></path>
              </svg>
            </div>
          </div>
        </nav>
      </header>
      <main>
        <div id="map"></div>

        <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
        <script src="../node_modules/leaflet.heat/dist/leaflet-heat.js"></script>
        <script>
          // Create a map centered at a specific location and zoom level
          var map = L.map('map').setView([26.0667, 50.5577], 3);


          // Define tile layers for various map providers
          var mapProviders = {
            openstreetmap: L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
              maxZoom: 19,
            }),
            mapbox: L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=YOUR_MAPBOX_ACCESS_TOKEN', {
              maxZoom: 19,
              id: 'mapbox/streets-v11', // Change this to your desired Mapbox style
            }),
            bing: L.tileLayer('https://tiles.bing.com:443/comp/ch/{q}?mkt=en&it=A,G,RL&shading=hill', {
              maxZoom: 19,
              attribution: '© 2023 Microsoft',
              subdomains: ['t0', 't1', 't2', 't3'],
            }),
            here: L.tileLayer('https://2.base.maps.ls.hereapi.com/maptile/2.1/maptile/newest/{style}/{z}/{x}/{y}/256/png8?apiKey=YOUR_HERE_API_KEY', {
              maxZoom: 19,
              style: 'normal.day',
            }),
            mapquest: L.tileLayer('https://otile{s}.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.jpg', {
              maxZoom: 19,
              subdomains: '1234',
            }),
            tomtom: L.tileLayer('https://api.tomtom.com/map/1/tile/basic/main/{z}/{x}/{y}.png?key=YOUR_TOMTOM_API_KEY', {
              maxZoom: 19,
            }),
            esri: L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}', {
              maxZoom: 19,
              attribution: '© Esri',
            }),
            thunderforest: L.tileLayer('https://{s}.tile.thunderforest.com/{style}/{z}/{x}/{y}.png?apikey=YOUR_THUNDERFOREST_API_KEY', {
              maxZoom: 19,
              style: 'cycle',
            }),
            cartodb: L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png', {
              maxZoom: 19,
            }),
            stadia: L.tileLayer('https://{s}.tile.stadia.maps.yourserver.com/basic/{z}/{x}/{y}{r}.png', {
              maxZoom: 19,
            }),
            maptiler: L.tileLayer('https://api.maptiler.com/maps/{style}/{z}/{x}/{y}.png?key=YOUR_MAPTILER_API_KEY', {
              maxZoom: 19,
              style: 'basic',
            }),
          };

          // Add the default tile layer (OpenStreetMap)
          mapProviders.openstreetmap.addTo(map);
          function calculateArrowCoordinates(latitude, longitude, windDirection, windSpeed) {
            // Convert wind direction from degrees to radians
            var windDirectionRadians = (windDirection - 90) * (Math.PI / 180);

            // Calculate the coordinates of the arrow polygon
            var arrowLength = windSpeed * 0.01; // Adjust this multiplier for arrow length
            var arrowWidth = 0.02; // Adjust this value for arrow width

            var arrowCoordinates = [
              [latitude, longitude],
              [
                latitude + arrowLength * Math.cos(windDirectionRadians),
                longitude + arrowLength * Math.sin(windDirectionRadians),
              ],
            ];

            // Add arrowhead vertices
            var arrowheadLength = 0.02; // Adjust this value for arrowhead length
            var arrowheadAngle = Math.PI / 6; // Adjust this value for arrowhead angle

            arrowCoordinates.push([
              latitude +
              (arrowLength - arrowheadLength) * Math.cos(windDirectionRadians + arrowheadAngle),
              longitude +
              (arrowLength - arrowheadLength) * Math.sin(windDirectionRadians + arrowheadAngle),
            ]);
            arrowCoordinates.push([latitude, longitude]);
            arrowCoordinates.push([
              latitude +
              (arrowLength - arrowheadLength) * Math.cos(windDirectionRadians - arrowheadAngle),
              longitude +
              (arrowLength - arrowheadLength) * Math.sin(windDirectionRadians - arrowheadAngle),
            ]);
            arrowCoordinates.push([latitude, longitude]);

            return arrowCoordinates;
          }
          1

          // fetch json
          const jsonPaths = ['../data/json/AUSdata.json', '../data/json/VIIRS.json', '../data/json/BRAdata.json', '../data/json/train.json']

          jsonPaths.forEach(element => {
            fetch(element)
              .then(response => response.json())
              .then(data => {
                // Check if data is an array
                if (Array.isArray(data)) {
                  const limitdata = data.slice(0, 300)
                  limitdata.forEach((obj, index) => {
                    const longitude = obj.longitude;
                    const latitude = obj.latitude;
                    const wind_direction_num = obj.wind_direction_num;
                    const wind_speed = obj.windspeed;
                    const fire_size = obj.fire_size;
                    const fire_spread = obj.fire_spread;
                    console.log(longitude + " " + latitude);
                    if (longitude != undefined && latitude != undefined) {
                      // marker
                      var marker = L.marker([latitude, longitude]).addTo(map);

                      if (wind_direction_num != null && wind_speed != null) {
                        console.log(wind_direction_num + " " + wind_speed);
                        // Calculate arrow coordinates
                        const arrowCoordinates = calculateArrowCoordinates(
                          latitude,
                          longitude,
                          wind_direction_num,
                          wind_speed
                        );
                        // Create a polygon using arrow coordinates
                        var arrowPolygon = L.polygon(arrowCoordinates, {
                          color: 'red', // Adjust arrow color as needed
                          // fillColor: 'red', // Adjust arrow color as needed
                          // fillOpacity: 1,


                        }).addTo(map);
                      }

                      heat.addLatLng([latitude, longitude, fire_size * 4]);
                    }
                  });
                } else {
                  console.error('JSON data is not an array.');
                }
              })
              .catch(error => console.error('Error fetching JSON:', error));
          });




          var heat = L.heatLayer([
            // get all latitude and longitude from train.json

          ], {
            radius: 25,
            minOpacity: 0.4,
            gradient: { 0.4: 'blue', 0.65: 'lime', 1: 'red' }
          }).addTo(map);

          // // Function to change the map provider based on the selected option
          // document.getElementById('mapProvider').addEventListener('change', function () {
          //   var selectedProvider = this.value;
          //   map.eachLayer(function (layer) {
          //     map.removeLayer(layer);
          //   });
          //   mapProviders[selectedProvider].addTo(map);
          //   // Loop through the locations and add markers to the map
          //   for (var i = 0; i < locations.length; i++) {
          //     var locatio = locations[i];
          //     var marker = L.marker([locatio.lat, locatio.lon]).addTo(map);
          //     marker.bindPopup(locatio.name);
          //   }

          // });


          // Loop through the locations and add markers to the map
          // for (var i = 0; i < locations.length; i++) {
          //   var locatio = locations[i];
          //   var marker = L.marker([locatio.lat, locatio.lon]).addTo(map);
          //   marker.bindPopup(locatio.name);
          // }
        </script>
      </main>
      <footer>
        <button class="layermenu">Layers</button>
        <input type="checkbox" id="checkboxInput">
        <label for="checkboxInput" onclick="myFunction()" class="toggleSwitch"></label>
        <script>
          function myFunction() {
            var element = document.body;
            element.classList.toggle("dark-mode");
          }
        </script>
      </footer>
    </section>
  </div>
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
    integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js"
    integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js"
    integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"
    integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/3.1.2/fullpage.min.js"
    integrity="sha512-gSf3NCgs6wWEdztl1e6vUqtRP884ONnCNzCpomdoQ0xXsk06lrxJsR7jX5yM/qAGkPGsps+4bLV5IEjhOZX+gg=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/3.1.2/fullpage.extensions.min.js"
    integrity="sha512-v0jjVvFpZqb1BcXhgLbaBDRKwZ09IpWFZL5NHTNbW9MlSjhZihkxEz2uNeMGd6HuK1qnSEL6JdyTr24ZHlgKow=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script>
    new fullpage('#fullpage', {
      // sectionsColor: ['yellow', 'orange', '#C0C0C0', '#ADD8E6'],

    });
  </script>
</body>

</html>